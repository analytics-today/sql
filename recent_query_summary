-- Recently Executed Query Summary.  Max last 14 days from INFORMATION SCHEMA
-- Shows for each warehouse, the number of queries and average bytes scanned


select  warehouse_name
,       warehouse_size
,       CASE
         WHEN avg(BYTES_SCANNED) >= POWER(2, 40) THEN TO_CHAR(ROUND(avg(BYTES_SCANNED) / POWER(2, 40), 1)) || ' Tb'
         WHEN avg(BYTES_SCANNED) >= POWER(2, 30) THEN TO_CHAR(ROUND(avg(BYTES_SCANNED) / POWER(2, 30), 1)) || ' Gb'
         WHEN avg(BYTES_SCANNED) >= POWER(2, 20) THEN TO_CHAR(ROUND(avg(BYTES_SCANNED) / POWER(2, 20), 1)) || ' Mb'
         WHEN avg(BYTES_SCANNED) >= POWER(2, 10) THEN TO_CHAR(ROUND(avg(BYTES_SCANNED) / POWER(2, 10), 1)) || ' K'
         ELSE TO_CHAR(round(avg(BYTES_SCANNED)))                        -- Average number of bytes scanned
       END AS AVG_BYTES_SCANNED  
,       round(avg(execution_time)/1000,0) as avg_exe_secs               -- Average execution time in seconds
,       round(avg(queued_overload_time)/1000,0) as avg_wait_secs        -- Average wait time in seconds 
,       count(*) as count_total                                         -- Total Quereies
,       count(decode(q.QUEUED_OVERLOAD_TIME,0,null,1)) as count_wait    -- Total Queries waited
,       round(count_wait / count_total * 100) as pct_wait_count         -- Percentage of waiting queriees
,       to_char(min(q.end_time),'DD-MON-YYYY HH24:MI') as min_end
,       to_char(max(q.end_time),'DD-MON-YYYY HH24:MI') as max_end
from table(snowflake.information_schema.query_history(
                        END_TIME_RANGE_START=> dateadd('day',-1,current_timestamp()),
                        END_TIME_RANGE_END  => current_timestamp(),
                        RESULT_LIMIT=>1000)) q
where query_type in ('SELECT', 'INSERT', 'UPDATE','DELETE')
and   warehouse_size is not null
group by warehouse_name
,       warehouse_size;
